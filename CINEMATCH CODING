import random 
import tkinter as tk  
from tkinter import ttk


# Movie database for Netflix, Disney+ and Amazon

movies = {
    "Netflix": {
        "Action": ["Extraction", "The Gray Man","6 Underground","Divergent","Inception","Suicide Squad","Jaws","The Lord of the Rings","Mission Impossible","John Wick"],
        "Comedy": ["Murder Mystery", "The Wrong Missy", "Holidate","Scary Movie","Step Brothers","Brides Maids","Mean Girls","Elf","How to loose a guy in 10 days"],
        "Animation": ["The Mitchells vs The Machines", "Klaus", "Over the Moon","Paddington","Sing","Scooby Doo","The Lego Movie","Cloudy with a chance of meatballs"],
        "Romcom": ["Notting Hill","After","No Hard Feelings","Mr and Mrs Smith", "She's all that","Twilight","The Notebook","The Kissing Booth", "Silver Linings"],
        "Drama": ["The Wolf of Wall Street","The Fall Guy","Dead Poets Society","The Hunger Games","Forrest Gump","The Truman Show"]

    },
    "Disney +":{
        "Action": ["Avengers: Endgame","Black Panther", "Shang-Chi","Mulan","Taken","Die Hard","Chain reaction","Enemy of the State"],
        "Comedy": ["Jungle Cruise", "Free Guy", "Cheaper by the Dozen","Home Alone","Night at the museum","Sisters Act","Happy Gilmore","The Proposal","The 40 year old Virgin"],
        "Animation": ["Moana", "Frozen", "Encanto","Inside Out","Ratatoullie","Toy Story","Wall E", "A bugs life", "Finding Nemo","The Incredibles","Up", "Lilo and Stitch","Frozen"],
        "Romcom": ["10 things I hate about you", "27 Dresses", "Cinderella", "The Fault in our stars", "Romeo and Juliet", "Pretty women","What a man"],
        "Drama": ["The Devil wears Prada", "The Help", "The Greatest Showman","Hamilton","Bohemian Rhapsody", "Joy", "Gone Girl"]
    },
    "Amazon": {
        "Action": ["The Tomorrow War", "Without Remorse", "Jack Ryan", "Warfare", "Skyfall", "American Sniper","Twister","007 Die another day"],
        "Comedy": ["Coming 2 America", "The Big Sick", "Late Night","My Old ass", "Pitch Perfect", "Easy A", "Bad Teacher", "Bad Moms"], 
        "Animation": ["Hotel Transylvania", "Rumble", "The Lorax","The Grinch","Despicable Me", "Kung Fu Panda", "Spiderman"],
        "Romcom": ["The Edge of Seventeen", "It Ends with us","Finding you","Crazy, Stuipid, Love", "Crazy Rich Asians"],
        "Drama": ["The Map that leads to you", "Saltburn", "The Assistant", "Beautiful Boy", "Gifted" ]

    }
}

# Dictionary to store user ratings which stores each rated movie as a key 
ratings = {}

# Setup Tkinter Window 
# This section intialises the GUI window and defines its appearance (title, size and background colour)

root = tk.Tk()
root.title("CineMatch:Movie Generator")
root.geometry("400x500")
root.config(bg="#660000")  # dark red background


# Title for the Tkinter window 

tk.Label(root, text= "üçø CineMatch üçø", font=("Helvetica", 26, "bold"),fg="#FFD700", bg="#2b0000").pack(pady=15)


# Dropdown menus for service and genre 
# These menus allow the user to choose from avaliable services and genres 
# The selections are linked to Stringvar variables 

tk.Label(root, text="Choose a streaming service:").pack(pady=5)
service_var = tk.StringVar()
service_dropdown = ttk.Combobox(root, textvariable=service_var)
service_dropdown['values'] = list(movies.keys())
service_dropdown.pack(pady=5)

tk.Label(root,text="Choose a genre").pack(pady=5)
genre_var = tk. StringVar()
genre_dropdown = ttk.Combobox(root, textvariable=genre_var)
genre_dropdown ['values'] = ["Action", "Comedy", "Animation","Romcom","Drama"]
genre_dropdown.pack(pady=5)


# Label to display the recommended movie
# This label dynamically updates each time the user generates a movie suggestion

result_label = tk.Label(root, text ="", font =("Arial", 12))
result_label.pack(pady=20)


# Rating System interface 
# This section creates the interactive 5 star rating system 
# It consists of clickable stars that change when hovered or selected 

rating_label = tk.Label(root, text="", font=("Arial", 11))
rating_label.pack(pady=5)

rating_frame = tk.Frame(root)
rating_frame.pack(pady=5)

rating_var = tk.IntVar(value=0)   # locked-in rating
hover_var = tk.IntVar(value=0)    # temporary hover value

# Watched / Rated Movies Selection
# Displays all movies that have been rated, along with their star ratings
tk.Label(root, text="üé¨ Rated Movies:", font =("Helvetica", 12, "bold")).pack(pady=5)
rated_listbox = tk.Listbox(root, width=45, height =6)
rated_listbox.pack(pady=5)

def update_rated_list():
    """Refresh the rated movies list."""
    rated_listbox.delete(0, tk.END)
    for movie, rating in ratings.items():
        stars = '‚≠êÔ∏è' * rating + '‚òÜ' * (5 - rating)
        rated_listbox.insert(tk.END, f"{movie} - {stars} ({rating}/5)")


# Create container for star widgets
# These functions handle hovering, clicking and displaying the appropriate number of stars to reflect the users selection 

stars_buttons = []

def update_stars_display(r):
    """Set star text to filled/empty up to r."""
    for idx, star_widget in enumerate(stars_buttons, start=1):
        star_widget.config(text="‚≠êÔ∏è" if idx <= r else "‚òÜ")

def on_star_hover(r):
    """Temporary highlight when hovering."""
    hover_var.set(r)
    update_stars_display(r)

def on_star_leave(event=None):
    """Restore locked-in rating when leaving a star."""
    update_stars_display(rating_var.get())

def set_rating(r):
    """Lock-in rating on click."""
    rating_var.set(r)
    update_stars_display(r)
    rating_label.config(text=f"You rated this movie: {'‚≠êÔ∏è'*r + '‚òÜ'*(5-r)} ({r}/5)")

    # Save rating for the current movie
    global current_movie
    if current_movie:
        ratings[current_movie] = r
        update_rated_list()

# Create 5 interactive star labels with good hit area and cursor
# Each label acts as a button. The lambda captures the loop index so each star reacts independently to hover and click events 
for i in range(1, 6):
    lbl = tk.Label(rating_frame, text="‚òÜ", font=("Arial", 28),
                   width=2, padx=5, pady=2, cursor="hand2")
    lbl.pack(side="left", padx=2)
    # Bind events - bind with default arg r=i to capture current i
    lbl.bind("<Enter>", lambda e, r=i: on_star_hover(r))
    lbl.bind("<Leave>", on_star_leave)
    lbl.bind("<Button-1>", lambda e, r=i: set_rating(r))
    stars_buttons.append(lbl)

#Function to recommend movie 
# This is the core logic of the program. It checks that the user has selected both a streaming service and genre, then chooses a random movie from that category
def recommend_movie():
    global current_movie 

    service = service_var.get()
    genre = genre_var.get()
    
    if service in movies and genre in movies[service]:
        # Randomly picks a movie from the chosen genre and service 
        choice = random.choice(movies[service][genre])
        result_label.config(text=f"We recommend: {choice} ({service}), {genre}")

        # Reset hover and locked-in rating for new movie
        current_rating = ratings.get(choice, 0)  # get previous rating if exists to maintain user history 
        rating_var.set(current_rating)
        hover_var.set(0)
        update_stars_display(current_rating)

        # Update the rating label to reflect existing or new rating 
        if current_rating:
            rating_label.config(text=f"Previous rating: {'‚≠êÔ∏è'*current_rating + '‚òÜ'*(5-current_rating)} ({current_rating}/5)")
        else:
            rating_label.config(text="Not rated yet")

        # Save the current movie to use when clicking stars
        current_movie = choice

    else:  # Error handling for missing selections and ensures the user cannot generate a movie without a valid input
        result_label.config(text="Please select both streaming service and genre")
        current_movie = None
        rating_var.set(0)
        hover_var.set(0)
        update_stars_display(0)
        rating_label.config(text="")

# Button to generate recommendation 
# When pressed, the program executes the recommend_movie() function
tk.Button(root, text="Generate Movie", command=recommend_movie).pack(pady=10)

# Run the Tkinter event loop and keep the application running for user interactions
root.mainloop()
